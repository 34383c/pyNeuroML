/*
  This file is based on the original NeuroML v1.8.1 export class 
  (http://www.neuron.yale.edu/hg/neuron/nrn/file/477da879a623/share/lib/hoc/mview/mviewxml.hoc)
  as developed by Michael Hines and Padraig Gleeson.

  While a version of this file will remain in the Neuron codebase, it has been copied here to allow 
  easier updates as the NeuroML standard develops & to facilitate bugfixes

*/

begintemplate ModelViewNeuroML2

public selected
public selsub, selsec, disp, xportLevel1, xportLevel2
public subsets, prependname, mview, unlink
public exportNeuroML2
external nil, hoc_sf_
objref tobj, tobj1, mview, secref, cellref, fileref
objref dmech, dparm, dpelm, dmlist
objref storecm, pointvec, segmentvec
strdef tstr


objref mainnml2file
objref cellnml2file

strdef nameForGroupWithAll
strdef singleSecGroupPrefix

objref singleSecGroupsCreated

objref p

strdef mainNotes


// Initialise template & set some useful strings
proc init() {local i
    mview = $o1
    nameForGroupWithAll = ""
    singleSecGroupPrefix = "OneSecGrp_"

    sprint(mainNotes, "  <notes> NeuroML 2 file generated from ModelView by: %s\n", nrnversion())
    sprint(mainNotes, "%s          Authors: Michael Hines, Sushil Kambampati and Padraig Gleeson,\n", mainNotes)
    sprint(mainNotes, "%s          Yale University and UCL \n", mainNotes)
    sprint(mainNotes, "%s  </notes>\n\n", mainNotes)

    p = new PythonObject()
    nrnpython("from pyneuroml.neuron.nrn_export_utils import get_cell_name")
    nrnpython("from pyneuroml.neuron.nrn_export_utils import get_segment_group_name")
    nrnpython("from neuron import h")
}


// Main export procedure
// Takes arguments: 
//    fileName          Name of file to export to
//    level             (1 = no biophys; 2 = include biophys (channel densities etc.))
//    separateCellFiles (1 = generate separate NeuroML2 files for each cell; 0 = all NeuroML info in one file)
//
proc exportNeuroML2() {local ok
    fileref = new File($s1)
    level = $2
    separateCellFiles = $3
    print "Exporting NeuroML 2 into: ",fileref.getname, ", 'level' = ", level

    ok = fileref.wopen()
    if (!ok) {
        printf("Could not open %s\n", fileref.getname)
        return
    }
    fileref.printf("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")

    header(fileref, level)
    xmlwrite(fileref, level, separateCellFiles)
    fileref.printf("</neuroml>\n")
    fileref.close()
}


// Print the NeuroML2 header
proc header() {
    $o1.printf("<neuroml xmlns=\"http://www.neuroml.org/schema/neuroml2\"\n")
    $o1.printf("    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n")
    $o1.printf("    xsi:schemaLocation=\"http://www.neuroml.org/schema/neuroml2 https://raw.github.com/NeuroML/NeuroML2/development/Schemas/NeuroML2/NeuroML_v2beta4.xsd\"\n", $2)
    $o1.printf("    id = \"NeuroML2_file_exported_from_NEURON\">\n\n")
}


// store cell number in cm of first seg of root of cell (and restore original cm)
proc assoc_cell_number() {local i, j, pointcount
    i = 0
    pointcount = 0
    forsec mview.dparm.sall {
        tobj = new SectionRef()
        if ($1 == 1) {
            storecm.x[i] = cm(.00001)
            cm(.00001) = i
            pointvec.x[i] = pointcount + 1
            segmentvec.x[i] = pointcount + 1 - i
            for j = 0, n3d() - 1 {
                pointcount += 1
            }
       } else {
            cm(.00001) = storecm.x[i]
       }
       i += 1
    }
}



// Write main body of XML file
// Takes arguments: 
//    $o1 fileref            File object
//    $2  nml2_level         (1 = no biophys; 2 = include biophys (channel densities etc.))
//    $3  separateCellFiles  (1 = generate separate NeuroML2 files for each cell; 0 = all NeuroML info in one file)
//
proc xmlwrite() { local proximalid, pointcount, segmentcount, sectioncount, i, j, k, l, m
    strdef date

    separateCellFiles = $3
    nml2_level = $2
    mainnml2file = $o1
    cellnml2file = $o1

    strdef network
    sprint(network, "\n  <network id=\"network\" type=\"networkWithTemperature\" temperature=\"%d degC\">", celsius)

    mainnml2file.printf("%s", mainNotes)

    proximalid = 0
    pointcount = 0
    sectioncount = 0
    forsec mview.dparm.sall {sectioncount += 1}
    pointvec = new Vector(sectioncount)
    segmentvec = new Vector(sectioncount)
    storecm = new Vector(sectioncount)

    // go over all points in all sections in all cells

    assoc_cell_number(1, $o1) 

    totalnumcells = 0

    oldidrootseg = -1


    for mview.realcells(cellref) {
        totalnumcells =totalnumcells+1
    }

    cellindex = 0

    for mview.realcells(cellref) {

        strdef cellName
        {cellName = p.get_cell_name(secname(), cellindex)}

        print "Exporting cell: ", cellref, ", secname: ", secname(), ", named: ", cellName

        if (separateCellFiles == 1) {
            strdef newcellfile
            sprint(newcellfile, "%s.cell.nml", cellName)
            cellnml2file = new File(newcellfile)
            ok = cellnml2file.wopen()
            if (!ok) {
                printf("Could not open %s\n", cellnml2file.getname)
                return
            }
            cellnml2file.printf("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")

            header(cellnml2file, level)

            mainnml2file.printf("  <include href=\"%s\"/>\n\n", newcellfile)
        } 

        cellnml2file.printf("  <cell id=\"%s\">\n", cellName)
        cellnml2file.printf("    <notes>Cell: %s exported from NEURON ModelView</notes>\n", cellName)
        cellnml2file.printf("    <morphology id=\"morphology\">\n")

        strdef segGrpsForSections 
        segGrpsForSections=""

        totalNumCables = 0

        forsec cellref.secanal.allseclist {

            totalNumCables = totalNumCables + 1
            strdef nmlSegGrpName
            {nmlSegGrpName = p.get_segment_group_name(secname())}

            cellnml2file.printf("<!-- Section: %s (segmentGroup: %s) which has %d 3D points, so %d segment(s)-->\n", secname(), nmlSegGrpName, n3d(), (n3d() - 1))

            sectioncount = cm(.00001)
            tobj = new SectionRef()
            proximalid = pointvec.x[sectioncount]
            pointcount = pointvec.x[sectioncount]
            segmentcount = segmentvec.x[sectioncount]

            sprint(segGrpsForSections, "%s\n<!-- Section: %s (segmentGroup: %s) which has %d 3D points, so %d segment(s)-->\n\n", segGrpsForSections, secname(), nmlSegGrpName, n3d(), (n3d() - 1))
            sprint(segGrpsForSections, "%s      <segmentGroup id = \"%s\"  neuroLexId=\"sao864921383\">    <!--\n", segGrpsForSections, nmlSegGrpName)
            sprint(segGrpsForSections, "%s             This group contains an unbranched set of segments, and all of the segmentGroups marked with\n", segGrpsForSections)
            sprint(segGrpsForSections, "%s             neuroLexId = sao864921383 form a non-overlapping set of all of the segments.\n", segGrpsForSections)
            sprint(segGrpsForSections, "%s             These segmentGroups correspond to the 'cables' of NeuroML v1.8.1, and map to/from NEURON sections -->\n", segGrpsForSections)

            if (nseg > 1) {

                sprint(segGrpsForSections, "%s        <annotation>\n", segGrpsForSections)
                sprint(segGrpsForSections, "%s          <property tag=\"numberInternalDivisions\" value=\"%d\"/> <!-- Discretization of model at time of export. Can be overridden by importing application-->\n", segGrpsForSections, nseg)
                sprint(segGrpsForSections, "%s        </annotation>\n", segGrpsForSections)
          
            }
            for i = 1, n3d() - 1 {

                hoc_sf_.right(nmlSegGrpName, hoc_sf_.substr(nmlSegGrpName, ".")+1)

                thissegid = segmentcount

                if (i == 1 && totalnumcells == 1 && !tobj.has_parent){  // i.e. the first seg of parentless sec on only cell
                    oldidrootseg = thissegid
                    thissegid = 0
                }

                cellnml2file.printf("      <segment id=\"%d\"", thissegid)

                cellnml2file.printf(" name = \"Seg%d_%s\"", i-1, nmlSegGrpName)
                strdef parentNameInfo
                parentNameInfo = ""

                if (i == 1) {
                    if (tobj.has_parent) {
                        tobj.parent {
                            fract = -1
                            tobj.sec {fract = parent_connection()}
                            if (fract==1) {
                                sprint(parentNameInfo, "  <!-- Parent section: %s -->", secname())
                                parentsegid = segmentvec.x[cm(.00001)] + n3d() - 2
                                if (parentsegid == oldidrootseg) {parentsegid = 0}

                                cellnml2file.printf(">\n        <parent segment=\"%d\"/", parentsegid)

                            } else {
                                parentSeg = -1
                                sprint(parentNameInfo, "  <!-- Connected at %g on parent section: %s  -->",fract,  secname())

                                for pointIndex = 1, n3d() - 1 {
                                    if (parentSeg<0) {
                                        arcFract =  arc3d(pointIndex)/L
                                        if (arcFract>=fract) {
                                            parentSeg = segmentvec.x[cm(.00001)] + pointIndex -2
                                        }
                                    }
                                }

                                if (parentSeg == oldidrootseg) {parentSeg = 0}

                                cellnml2file.printf(">%s\n        <parent segment=\"%d\"/", parentNameInfo, parentSeg)
                            }

                        }
                    }
                } else {
                    parentsegid = segmentcount - 1
                    if (parentsegid == oldidrootseg) {parentsegid = 0}
                    cellnml2file.printf(">%s\n        <parent segment=\"%d\"/", parentNameInfo, parentsegid)
                }

                cellnml2file.printf(">\n")

                if (i == 1) {
                cellnml2file.printf("        <proximal x=\"%g\" y=\"%g\" z=\"%g\" diameter=\"%g\"/>\n", \
                    x3d(i-1), y3d(i-1), z3d(i-1), diam3d(i-1))
                }
                cellnml2file.printf("        <distal x=\"%g\" y=\"%g\" z=\"%g\" diameter=\"%g\"/>\n", \
                x3d(i), y3d(i), z3d(i), diam3d(i))

                cellnml2file.printf("      </segment>\n")

                sprint(segGrpsForSections, "%s        <member segment = \"%d\"/>\n", segGrpsForSections, thissegid)

                pointcount += 1
                segmentcount += 1
            }
            

            sprint(segGrpsForSections, "%s      </segmentGroup>\n\n", segGrpsForSections)
        }

        cellnml2file.printf("%s", segGrpsForSections)
        

        if (object_id(cellref.secanal.parmsubsets) == 0) {
            cellref.secanal.analyse()
        }

        if (cellref.secanal.parmsubsets.subsets.count >= 1) {

            for i=0, cellref.secanal.parmsubsets.subsets.count-1 {

                tobj1 = cellref.secanal.parmsubsets.subsets.object(i)

                strdef groupName
                sprint(groupName, "%s", tobj1)
                {groupName = p.get_segment_group_name(groupName)}
                strdef comment
                comment = ""


                if (hoc_sf_.len(nameForGroupWithAll)==0 && tobj1.subset.size== totalNumCables) {
                    nameForGroupWithAll = groupName
                    groupName = "all"
                    sprint(comment, "<!-- Replacing subset name %s with all, as it contains all sections -->", nameForGroupWithAll)
                }

                cellnml2file.printf("      <segmentGroup id=\"%s\"> %s\n", groupName, comment)

                for j=0, tobj1.subset.size - 1 {
                    secref = cellref.secanal.all.object(tobj1.subset.x(j))

                    strdef currsecname
                    secref.sec {currsecname = secname()}

                    {currsecname = p.get_segment_group_name(currsecname)}

                    cellnml2file.printf("        <include segmentGroup = \"%s\"/>\n", currsecname)
                }
                cellnml2file.printf("      </segmentGroup>\n\n")
            }
        } else {
            cellnml2file.printf("      <!-- No cable groups present -->\n")
        }

        /// Must check if there is an easier way of doing this...

        singleSecGroupsCreated = new Vector()

        for i=0, cellref.secanal.dmlist.count - 1 {
            dmech = cellref.secanal.dmlist.object(i)

            if (object_id(dmech.location) == 0) { continue }

            for dmech.parmiter(dparm) {
                for dparm.parmiter(dpelm) {
                    for l=0, dpelm.parms.count - 1 {
                        ///printparmval(cellnml2file, cellref.secanal.all, "", dpelm.parms.object(l), 1)  // Converting ohm cm (NEURON units) to Kohm cm (Phys units)

                        trySingleSecGroup = 1
                        if (dpelm.parms.object(l).type() == 1){
                            if (dpelm.parms.object(l).location.type() == 8) { trySingleSecGroup = 0}
                        }

                        if(trySingleSecGroup==1) {
                            secref = cellref.secanal.all.object(dpelm.parms.object(l).location.isec)

                            strdef groupName
                            sprint(groupName, "%s%s", singleSecGroupPrefix, secref)

                            if (hoc_sf_.substr(groupName,"[")>=0 && hoc_sf_.substr(groupName,"]")>=0) {
                                hoc_sf_.left(groupName, hoc_sf_.substr(groupName,"]"))
                                strdef index
                                index = groupName
                                hoc_sf_.left(groupName, hoc_sf_.substr(groupName,"["))
                                hoc_sf_.right(index, hoc_sf_.substr(index,"[")+1)
                                sprint(groupName, "%s_%s", groupName, index)

                            }

                            strdef currsecname
                            secref.sec {currsecname = secname()}
                            {currsecname = p.get_segment_group_name(currsecname)}

                            cableid = secref.sec.cm(.00001)

                            sprint(comment, "<!-- Creating a group containing a single section: %s... -->", currsecname)

                            if (!singleSecGroupsCreated.contains(cableid)) {  //  so no repeats...

                                cellnml2file.printf("      <segmentGroup id=\"%s\"> %s\n", groupName, comment)
                                cellnml2file.printf("        <include segmentGroup = \"%s\"/>\n", currsecname)
                                cellnml2file.printf("      </segmentGroup>\n\n")
                            }

                            singleSecGroupsCreated.append(cableid)

                        }
                    }
                }
            }

        }

        cellnml2file.printf("    </morphology>\n")


        //////////////////////////////////////////////////////////////////////////
        // biophysics element for THIS cell. Only include if level > 1

        if (nml2_level > 1) { // i.e. "Level 2" of NeuroML or greater

            cellnml2file.printf("\n    <!-- Biophysical properties -->\n\n    <biophysicalProperties id=\"biophys\"> \n")
            cellnml2file.printf("\n      <membraneProperties> \n\n")

            for mview.dparm.kschans(tobj) {
                kschan_xmlwrite(cellnml2file, tobj)
            }

            // to distinguish b/w toplevel and encapsulated real cells
            if (object_id(cellref.secanal.parmsubsets) == 0) {
                continue
            }


            for i=0, cellref.secanal.dmlist.count - 1 {
                dmech = cellref.secanal.dmlist.object(i)
                // TODO:        for tobj.mechs(dmech) { }
                if (dmech.parms.count > 0) {
                }
                if (object_id(dmech.location) == 0) { continue }


                if (strcmp(dmech.name,"capacitance") != 0 && strcmp(dmech.name,"Ra") != 0 && hoc_sf_.substr(dmech.name, "_ion") == -1) {
                    strdef passiveAttr 
                    passiveAttr = ""
                    // If mech name is built in passive conductance in NEURON
                    if (strcmp(dmech.name,"pas") == 0) {
                        // Not used in nml2
                        //////passiveAttr = " passive_conductance=\"true\""
                    }
                    // If mech name is default passive conductance from neuroConstruct
                    if (strcmp(dmech.name,"LeakConductance") == 0) {
                        // Not used in nml2
                        /////passiveAttr = " passive_conductance=\"true\""
                    }
                    cellnml2file.printf("        <channelDensity ionChannel=\"%s\" id=\"%s_XXX\"%s ", dmech.name, dmech.name, passiveAttr)
                    for j=0, dmech.location.subset.size()-1 {
                        secref = cellref.secanal.all.object(dmech.location.subset.x(j))
                        //              printsec(cellnml2file, secref)
                    }
                    for dmech.parmiter(dparm) {
                        for dparm.parmiter(dpelm) {
                            for l=0, dpelm.parms.count - 1 {

                                strdef paramNameToUse 
                                paramNameToUse = dparm.name
                                print "    Init name ", paramNameToUse

                                strdef comment 
                                comment = ""

                    // strip suffix
                                if  (hoc_sf_.substr(paramNameToUse, "_")>=0) {
                                    hoc_sf_.left(paramNameToUse, hoc_sf_.substr(paramNameToUse, "_"))
                                }

                                if (strcmp(paramNameToUse,"gmax") == 0) {
                                    paramNameToUse = "condDensity"
                                    sprint(comment, "<!-- Assuming parameter gmax refers to maximum cond density, so replacing it with condDensity -->", paramNameToUse)
                                }
                                if (strcmp(dparm.name,"g_pas") == 0) {
                                    paramNameToUse = "condDensity"
                                    sprint(comment, "<!-- Assuming parameter g_pas refers to passive maximum cond density, so replacing it with condDensity -->", paramNameToUse)
                                }

                                if (strcmp(paramNameToUse,"g") == 0) {
                                    paramNameToUse = "condDensity"
                                    sprint(comment, "<!-- Assuming parameter g refers to passive maximum cond density, so replacing it with condDensity -->", paramNameToUse)

                                } else if (hoc_sf_.substr(paramNameToUse, "g")==0 && hoc_sf_.substr(paramNameToUse, "bar")>=1) {
                                    sprint(comment, "<!-- Assuming parameter %s refers to the maximum cond density, so replacing it with condDensity -->", paramNameToUse)
                                    paramNameToUse = "condDensity"
                                } else if (strcmp(paramNameToUse,"gl") == 0) {
                                    paramNameToUse = "condDensity"
                                    sprint(comment, "<!-- Assuming parameter gl refers to the maximum cond density, so replacing it with condDensity -->", paramNameToUse)
                                } else if (hoc_sf_.substr(dmech.name, "_") >= 0) {

                                    strdef paramNameSuspect
                                    paramNameSuspect = dmech.name
                                    hoc_sf_.left(paramNameSuspect, hoc_sf_.substr(paramNameSuspect, "_"))
                                    sprint(paramNameSuspect, "g%s", paramNameSuspect)
                                    print "Suspecting: ",paramNameSuspect
                                    if (strcmp(paramNameToUse,paramNameSuspect) == 0) {
                                        sprint(comment, "Assuming parameter %s refers to the maximum cond density, so replacing it with condDensity", paramNameToUse)
                                        paramNameToUse = "condDensity"
                                    }
                                }
                                print "  Checking param: ",paramNameToUse, " in ", dmech.name
                                //print comment


                                factor = 1
                                strdef units 
                                units = "???"

                                if (hoc_sf_.substr(paramNameToUse,"condDensity") >= 0) {
                                    factor = 1000   /// converting S cm-2 (NEURON units) to mS cm-2 (Phys units)
                                    units = "mS_per_cm2"
                                }
                                if (strcmp(paramNameToUse,"e") == 0) {
                                    paramNameToUse = "erev"
                                    units = "mV"
                                }
                                printparmval(cellnml2file, cellref.secanal.all, paramNameToUse, dpelm.parms.object(l), factor, comment, dmech.name, units)
                            }
                        }
                    }
                    cellnml2file.printf("/>\n\n")
                }
            }


            strdef noComment
            noComment = ""

            for i=0, cellref.secanal.dmlist.count - 1 {
                dmech = cellref.secanal.dmlist.object(i)

                if (object_id(dmech.location) == 0) { continue }

                if (strcmp(dmech.name,"capacitance") == 0) {
                    strdef units 
                    units = "uF_per_cm2"
                    cellnml2file.printf("        <specificCapacitance ")
                    for dmech.parmiter(dparm) {
                        for dparm.parmiter(dpelm) {
                            for l=0, dpelm.parms.count - 1 {
                                printparmval(cellnml2file, cellref.secanal.all, "", dpelm.parms.object(l), 1, noComment, dmech.name, units) // Converting μF cm-2 (NEURON units) to μF cm-2 (Phys units)
                            }
                        }
                    }
                    cellnml2file.printf("/>\n\n")
                } 
            }

            cellnml2file.printf("      </membraneProperties> \n\n      <intracellularProperties>\n\n")


            for i=0, cellref.secanal.dmlist.count - 1 {
                dmech = cellref.secanal.dmlist.object(i)

                if (object_id(dmech.location) == 0) { continue }

                if (strcmp(dmech.name,"Ra") == 0) {

                    strdef units 
                    units = "kohm_cm"
                    cellnml2file.printf("        <resistivity")
                    for dmech.parmiter(dparm) {
                        for dparm.parmiter(dpelm) {
                            for l=0, dpelm.parms.count - 1 {
                                printparmval(cellnml2file, cellref.secanal.all, "", dpelm.parms.object(l), 0.001, noComment, dmech.name, units)  // Converting ohm cm (NEURON units) to Kohm cm (Phys units)
                            }
                        }
                    }
                    cellnml2file.printf("/>\n\n")
                } 
            }

           //////////// ion_xmlwrite(cellnml2file)

            cellnml2file.printf("      </intracellularProperties>\n\n    </biophysicalProperties>\n\n")   

        }

        cellnml2file.printf("  </cell> \n")


        sprint(network, "%s\n    <population id=\"Pop_%s\" component=\"%s\" size=\"1\"/>", network, cellName, cellName)

        if (separateCellFiles == 1) {
            cellnml2file.printf("</neuroml>\n")
            cellnml2file.close()

        }
        
        cellindex = cellindex +1

    }

    sprint(network, "%s\n  </network>\n", network)
    mainnml2file.printf("%s \n", network)

    assoc_cell_number(0, mainnml2file) 

    artcell(mainnml2file)
}



proc artcell() {local i,j,l
    for i=0, mview.acview.alist.count-1 {
        dmech = mview.acview.alist.object(i) 

        $o1.printf("  <mechanism name=\"%s\">\n",  dmech.name)

        for j=0, dmech.parms.count-1 {
            dparm = dmech.parms.object(j)
            for dparm.parmiter(dpelm) {
                for l=0, dpelm.parms.count - 1 {
                    tobj = dpelm.parms.object(l)
                    // 1 is ModelViewParmVal, 2 is ModelViewParmVec
                    if (tobj.type() == 1) {
                        $o1.printf("    <parameter name=\"%s\" value=\"%g\"/>\n",  dpelm.name, tobj.value)
                    }
                }
            }
        }

        $o1.printf("  </mechanism>\n")
    }
}

proc printparmval() {
    print "-- Generating parameter value, type: ", $o4.type(), " param: ", $s3, ", val: ", $o4.value, ", comm: [", $s6, "], ref: ", $s7, ", units: ", $s8
    // 1 is ModelViewParmVal, 2 is ModelViewParmVec
    if ($o4.type() == 1) {

        strdef nameattr
        nameattr = ""

        strdef comment
        comment = ""

        if (hoc_sf_.len($s3)>0) { // only incl if $s3 is set => condDensity etc. not cap

            strdef newParamName 
            newParamName = $s3

            $o1.printf(" %s = \"%g %s\"",  newParamName, $o4.value * $5, $s8)  
        } else {

            $o1.printf(" value=\"%g %s\" %s", $o4.value * $5, $s8, $s6)   // specCapacitance, etc.
        }

        // 8 is ModelViewParmSubset, 9 is ModelViewParmSec
        if ($o4.location.type() == 8) {
            print "  ModelViewParmSubset..."

//	        for m=0, $o4.location.subset.size()-1 {
//		        secref = $o2.object($o4.location.subset.x(m))
//	            printsec($o1, secref)
//	        }

            strdef groupName
            sprint(groupName, "%s", $o4.location)

            if (hoc_sf_.substr(groupName,"[")>=0 && hoc_sf_.substr(groupName,"]")>=0) {
                hoc_sf_.left(groupName, hoc_sf_.substr(groupName,"]"))
                strdef index 
                index = groupName
                hoc_sf_.left(groupName, hoc_sf_.substr(groupName,"["))
                hoc_sf_.right(index, hoc_sf_.substr(index,"[")+1)
                sprint(groupName, "%s_%s", groupName, index)

            }
            if (strcmp(groupName,nameForGroupWithAll) == 0) {
                groupName = "all"
            }

            if (strcmp(groupName,"all") == 0) {
                // Not including as not required...
            } else {
                $o1.printf(" segmentGroup=\"%s\" ", groupName)
            }

        } else {
            print "  ModelViewParmSec..."
            secref = $o2.object($o4.location.isec)
            //printsec($o1, secref)

            strdef groupName
            sprint(groupName, "%s%s", singleSecGroupPrefix, secref)

            if (hoc_sf_.substr(groupName,"[")>=0 && hoc_sf_.substr(groupName,"]")>=0) {
                hoc_sf_.left(groupName, hoc_sf_.substr(groupName,"]"))
                strdef index 
                index = groupName
                hoc_sf_.left(groupName, hoc_sf_.substr(groupName,"["))
                hoc_sf_.right(index, hoc_sf_.substr(index,"[")+1)
                sprint(groupName, "%s_%s", groupName, index)

            }

            $o1.printf(" segmentGroup = ", groupName)

        }
        //$o1.printf("        </bio:parameter>\n")

    } else if ($o4.type() == 2) {  // ModelViewParmVec

        secref = $o2.object($o4.location.isec)

        strdef groupName
        sprint(groupName, "%s%s", singleSecGroupPrefix, secref)

        if (hoc_sf_.substr(groupName,"[")>=0 && hoc_sf_.substr(groupName,"]")>=0) {
            hoc_sf_.left(groupName, hoc_sf_.substr(groupName,"]"))
            strdef index
            index = groupName
            hoc_sf_.left(groupName, hoc_sf_.substr(groupName,"["))
            hoc_sf_.right(index, hoc_sf_.substr(index,"[")+1)
            sprint(groupName, "%s_%s", groupName, index)

        }

        strdef currsecname
        secref.sec {currsecname = secname()}

        $o1.printf("        <!-- There is an inhomogenous parameter: %s present for mechanism: %s on group: %s for section: %s! -->\n",  $s3, $s7, groupName, currsecname)

        avgVal = 0
        strdef infoVals
        infoVals = ""

        for i=0, $o4.vec.size - 1 {
             sprint(infoVals, "%s %g, ", infoVals, $o4.vec.x(i))
             avgVal = avgVal + $o4.vec.x(i)
        }
        avgVal = avgVal / $o4.vec.size

        $o1.printf("        <!-- Actual values along section (in NEURON units): %s but using average: %g -->\n",  infoVals, avgVal)

        //printvecvals($o1, $o4)

        $o1.printf("        <bio:parameter name=\"%s\" value=\"%g\"> \n",  $s3, avgVal * $5)
        $o1.printf("          <bio:group>%s</bio:group>\n", groupName)
        $o1.printf("        </bio:parameter>\n")
    }
}



proc printsec() {
    $o2.sec { 
        $o1.printf("      <section name=\"%s\"/>\n", secname())
    }
}


proc printvecvals() {local i

    $o2.location.realcell.all.object($o2.location.isec).sec {
        $o1.printf("          <!-- NOTE: this mechanism is present on %s but has non uniform values. Expression for generating values cannot be retrieved! -->\n", secname())
        ///$o1.printf("        <section name=\"%s\">\n", secname())
    }
    for i=0, $o2.vec.size - 1 {
        //$o1.printf("        <value>%g</value>\n", $o2.vec.x(i))
        $o1.printf("            <!-- Value %g: %g -->\n", i, $o2.vec.x(i))
    }
    //$o1.printf("      </section>\n")
}


proc ion_xmlwrite() {
    for mview.dparm.mechs(tobj) {
        if (hoc_sf_.head(tobj.name, "_ion", tstr) != -1) {
            $o1.printf("      <bio:ion name=\"%s\" charge=\"%d\"/>\n", tstr, ion_charge(tobj.name))
        }
    }
}


endtemplate ModelViewNeuroML2
